<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="eu.hydrologis.jgrass.models" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="eu.hydrologis.jgrass.models" id="openmimodel" name="eu.hydrologis.jgrass.models.openmimodel"/>
      </appinfo>
      <documentation>
         This extension point creates an openmi based model that is compatible with the JGrass console engine and Jgrass modeling language for chaining environmental models.

For informations have a look at:
www.jgrass.org
www.openmi.org
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="model" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="model">
      <complexType>
         <sequence minOccurs="0" maxOccurs="1">
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="default" value="enter new class here">
            <annotation>
               <documentation>
                  &lt;p&gt;The class name for the new model to be created.&lt;/p&gt;
&lt;p&gt;Note that in order to follow JGrass&apos;s guidelines the class name and package should be chosen following the schema:
to create a &lt;b&gt;r.something&lt;/b&gt; command create a package &lt;b&gt;eu.hydrologis.jgrass.models.r.something&lt;/b&gt; and put inside there a class named &lt;b&gt;r_something.java&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Note that the class will need to have the following constructors defined, to be functional:
&lt;/p&gt;
&lt;i&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; public h_something() {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; err =
FluidUtils.newPrintStream(null, System.err);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; out =
FluidUtils.newPrintStream(null, System.out);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; public h_something( PrintStream output, PrintStream
error ) {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; err =
FluidUtils.newPrintStream(error, System.err);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; out =
FluidUtils.newPrintStream(output, System.out);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; }
&lt;/i&gt;
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="eu.hydrologis.libs.openmi.ModelsBackbone:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="inputitems" type="string" use="default" value="">
            <annotation>
               <documentation>
                  &lt;p&gt;
A comma separated list of input exchange items that the model will accept. 
&lt;/p&gt;

&lt;p&gt;For example if it has two input exchange items that may be linked to the model, the entry could be kind of:&lt;/p&gt;
&lt;b&gt;map=0,rain=1&lt;/b&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputitems" type="string" use="default" value="">
            <annotation>
               <documentation>
                  &lt;p&gt;
A comma separated list of output exchange items that the model will accept. 
&lt;/p&gt;

&lt;p&gt;For example if it has one output exchange items that may be linked to the model, the entry could be kind of:&lt;/p&gt;
&lt;b&gt;discharge=0&lt;/b&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="guixml" type="string">
            <annotation>
               <documentation>
                  &lt;p&gt;A correct xml file content that can represent the command as off the uibuilder guidelines. This string will be correctly placed in the system as a file and taken as gui definition for the command.&lt;/p&gt;

&lt;p&gt;
For example for &lt;b&gt;h.pitfiller&lt;/b&gt; the gui definition is:&lt;/p&gt;

&lt;i&gt;
&amp;lt;command descr=&quot;h.pitfiller&quot; name=&quot;h.pitfiller&quot;&amp;gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;field desc=&quot;in&quot; name=&quot;input&quot; order=&quot;0&quot;
repr=&quot;--igrass-elevation #&quot; required=&quot;true&quot; type=&quot;rastermap&quot;/&amp;gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;field desc=&quot;out&quot; name=&quot;output&quot; order=&quot;1&quot;
repr=&quot;--ograss-pit #&quot; required=&quot;true&quot; type=&quot;string&quot;/&amp;gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;i18n key=&quot;in&quot; en=&quot;input elevation map&quot; it=&quot;mappa
di elevazione in ingresso&quot;/&amp;gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;i18n key=&quot;out&quot; en=&quot;depitted output map&quot;
it=&quot;mappa depittata in uscita&quot;/&amp;gt;&lt;br&gt;
&amp;lt;/command&amp;gt;&lt;br&gt;&lt;/i&gt;
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         /*
 * JGrass - Free Open Source Java GIS http://www.jgrass.org 
 * (C) HydroloGIS - www.hydrologis.com 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */
      </documentation>
   </annotation>

</schema>
